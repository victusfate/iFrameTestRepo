// Generated by CoffeeScript 1.6.1
(function() {
  var args, async, createIframeFile, duration, exec, log, printIframeInfo, probeFrames, version;

  exec = require('child_process').exec;

  async = require('async');

  log = console.log;

  args = process.argv.splice(2);

  duration = 11;

  version = 4;

  probeFrames = function(file, cb) {
    return exec('ffprobe -show_frames -print_format json ' + file, {
      maxBuffer: 10000 * 1024
    }, function(oError, oStdOut, oStdError) {
      var frames;
      if (oError) {
        return cb(oError);
      } else {
        frames = JSON.parse(oStdOut).frames;
        return cb(null, frames);
      }
    });
  };

  createIframeFile = function(file, cb) {
    return probeFrames(file, function(err, frames) {
      var cpos, frame, i, k, keyPackets, nextPos;
      if (err) {
        log(err);
        return cb(err);
      } else {
        if (frames.length) {
          keyPackets = {
            times: [],
            pos: [],
            psize: [],
            tStart: frames[0].pkt_pts_time,
            tEnd: frames[frames.length - 1].pkt_pts_time,
            totalSize: parseInt(frames[frames.length - 1].pkt_pos, 10) + parseInt(frames[frames.length - 1].pkt_size, 10),
            file: file
          };
          for (k in frames) {
            frame = frames[k];
            if (!(frame.media_type === 'video' && parseInt(frame.key_frame, 10) === 1)) {
              continue;
            }
            keyPackets.times.push(parseFloat(frame.pkt_pts_time));
            cpos = parseInt(frame.pkt_pos, 10);
            keyPackets.pos.push(cpos);
            i = parseInt(k, 10);
            if (i < (frames.length - 1)) {
              nextPos = parseInt(frames[i + 1].pkt_pos, 10);
              keyPackets.psize.push(nextPos + 188 - cpos);
            } else {
              keyPackets.psize.push(parseInt(frame.pkt_size, 10));
            }
          }
          return cb(null, keyPackets);
        }
      }
    });
  };

  log("#EXTM3U");

  log("#EXT-X-TARGETDURATION:" + duration);

  log("#EXT-X-VERSION:" + version);

  log("#EXT-X-MEDIA-SEQUENCE:0");

  log("#EXT-X-PLAYLIST-TYPE:VOD");

  log("#EXT-X-I-FRAMES-ONLY");

  printIframeInfo = function(keyPacketList) {
    var dT, files, i, k, nextTime, packet, pos, prevTime, psize, tEnd, times, v, _i, _len, _ref;
    times = [];
    pos = [];
    psize = [];
    files = [];
    prevTime = 0;
    tEnd = 0;
    for (_i = 0, _len = keyPacketList.length; _i < _len; _i++) {
      packet = keyPacketList[_i];
      i = 0;
      _ref = packet.times;
      for (k in _ref) {
        v = _ref[k];
        dT = v;
        if (k === 0) {
          dT += prevTime;
        }
        times.push(v);
        pos.push(packet.pos[k]);
        psize.push(packet.psize[k]);
        files.push(packet.file);
        prevTime = v;
      }
      tEnd = packet.tEnd;
    }
    for (k in times) {
      v = times[k];
      k = parseInt(k, 10);
      if (k < times.length - 1) {
        nextTime = times[k + 1];
        log("#EXTINF:" + ((nextTime - v).toFixed(4)) + ",");
        log("#EXT-X-BYTERANGE:" + psize[k] + "@" + pos[k]);
        log(files[k]);
      } else {
        nextTime = tEnd;
        log("#EXTINF:" + ((nextTime - v).toFixed(4)) + ",");
        log("#EXT-X-BYTERANGE:" + psize[k] + "@" + pos[k]);
        log(files[k]);
      }
    }
    return log("#EXT-X-ENDLIST");
  };

  async.map(args, function(file, cb) {
    return createIframeFile(file, cb);
  }, function(err, keyPacketList) {
    return printIframeInfo(keyPacketList);
  });

}).call(this);
